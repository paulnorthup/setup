set nocompatible
filetype off
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" My plugins
Plugin 'rking/ag.vim'
Plugin 'sjl/gundo.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdtree'
Plugin 'ervandew/supertab'
Plugin 'tpope/vim-markdown'
Plugin 'Lokaltog/vim-powerline'
Plugin 'othree/html5.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-haml'
Plugin 'rgarver/Kwbd.vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'fleischie/vim-styled-components'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'isRuslan/vim-es6'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'zenburn'
Plugin 'vim-syntastic/syntastic'
Plugin 'zxqfl/tabnine-vim'

call vundle#end()
filetype plugin indent on
syntax enable

"SOURCE
nmap <leader>s :source $MYVIMRC<CR>

"GENERAL
set backspace=2
set splitbelow
set splitright

"syntax/linting
syntax on
filetype plugin on
filetype plugin indent on
au BufRead,BufNewFile *.scss set filetype=scss
set textwidth=80

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

nmap <leader>st :SyntasticToggleMode<CR>
nmap <leader>sc :SyntasticCheck<CR>
nmap <leader>sf :SyntasticCheck --fix<CR>

" enable eslint
let g:syntastic_javascript_checkers = ['eslint']

" force json files to use json linting instead of javascript
au BufRead,BufNewFile *.json set filetype=json

"window
set number
set expandtab tabstop=2 shiftwidth=2 softtabstop=2
set gfn=monaco:h12

"tabs
nmap <leader>tn :tabnew<CR>
nmap <leader>tc :tabclose<CR>
nmap <leader>to :tabonly<CR>
nmap <leader>ts :tabs<CR>

"swp and backup
set dir=~/.vimtmp
set backup
set backupdir=~/.vimbackup

"cursor
set cursorline
set cursorcolumn
"status bar
set laststatus=2

"KEYMAPPING
nmap <Tab> <leader>

"navigation
nmap j gj
nmap k gk

"buffers
nmap <leader>bd :Kwbd<CR>
nmap <leader>vs :vsplit<CR>
nmap <leader>hs :split<CR>
nmap <C-L> <C-W>l
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k

"CtrlP!
nmap ; :CtrlPBuffer<CR>
nmap ' :CtrlP<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_max_files=0
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

"registers
nmap <leader>" :reg<CR>

"search
set incsearch
set ignorecase
set smartcase
set hlsearch
nmap <leader>q :nohlsearch<CR>

"nerdtree
nnoremap <leader>e :NERDTreeToggle<CR>

"tab spacing
nmap <leader>t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap <leader>T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nmap <leader>M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nmap <leader>m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
nmap <leader>w :setlocal wrap!<CR>:setlocal wrap?<CR>
"markdown
nmap <leader>dm :%!/usr/local/bin/markdown --html4tags<CR>
"Gundo
map <leader>gut :GundoToggle<CR>
"CloseTag.vim
let b:unaryTagsStack=""

if !exists("b:unaryTagsStack")
    let b:unaryTagsStack=""
endif

"NERDREE
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDChristmasTree=1
let NERDTreeWinSize=40

"COLORS
set t_Co=256
set background=dark
colorscheme zenburn

"RESIZING
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>-
endif

"PASTE
set pastetoggle=<leader>p
