set nocompatible
filetype off
set mmp=5000
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/setup/files/vim/snippets/
call vundle#begin()
runtime macros/matchit.vim

"fuzzy finder
set rtp+=/usr/local/opt/fzf

"let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" My plugins
" Syntax
Plugin 'tpope/vim-markdown'
Plugin 'othree/html5.vim'
Plugin 'tpope/vim-haml'
Plugin 'fleischie/vim-styled-components'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'tpope/vim-rails'
Plugin 'isRuslan/vim-es6'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'thoughtbot/vim-rspec'
Plugin 'jgdavey/tslime.vim'
Plugin 'vimwiki/vimwiki'
Plugin 'pechorin/any-jump.vim'
Plugin 'dense-analysis/ale'

"Math
Plugin 'sk1418/HowMuch'

"Helpers
Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdtree'
Plugin 'ervandew/supertab'
Plugin 'majutsushi/tagbar'

"Snippets
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

"Search
Plugin 'rking/ag.vim'
Plugin 'junegunn/fzf.vim'

"Other
Plugin 'morhetz/gruvbox'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'rgarver/Kwbd.vim'
Plugin 'zenburn'

call vundle#end()
filetype plugin indent on
syntax enable
set foldmethod=syntax

"SOURCE
nmap <leader>so :source $MYVIMRC<CR>

"GENERAL
set backspace=2
set splitbelow
set splitright

"Zoom
noremap Zz <c-w>_ \| <c-w>\|
noremap Zo <c-w>=

"syntax/linting
syntax on
filetype plugin on
filetype plugin indent on
au BufRead,BufNewFile *.scss set filetype=scss
set textwidth=80
"Ale
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
nmap <C-k> <Plug>(ale_previous_wrap)
nmap <C-j> <Plug>(ale_next_wrap)
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_sign_column_always = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\}

" clear the statusline for when vimrc is reloaded
set statusline=   
" lint warnings
set statusline+=%#warningmsg#                 
" buffer number
set statusline+=%-3.3n\                       
" flags
set statusline+=%h%m%r%w                      
" file name
set statusline+=%t\                           
" line:column
set statusline+=%l:%c\ 

set statusline+=%<\

" right align
set statusline+=%=
"start file meta group
set statusline+=[
" filetype
set statusline+=%{strlen(&ft)?&ft:'none'},   
" encoding
set statusline+=%{strlen(&fenc)?&fenc:&enc},  
" end file meta group
set statusline+=]\ 
"file path
set statusline+=%F\ 
" pathogen info
set statusline+=\ %.12{fugitive#statusline()}
" highlight vim-rspec mappings
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  
" always display status line
set laststatus=2

" status bar colors
au InsertEnter * hi statusline guifg=black guibg=#d7afff ctermfg=black ctermbg=magenta
au InsertLeave * hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan
hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan

hi User1 ctermfg=007 ctermbg=239 guibg=#4e4e4e guifg=#adadad
hi User2 ctermfg=007 ctermbg=236 guibg=#303030 guifg=#adadad
hi User3 ctermfg=236 ctermbg=236 guibg=#303030 guifg=#303030
hi User4 ctermfg=239 ctermbg=239 guibg=#4e4e4e guifg=#4e4e4e


nmap <leader>st :SyntasticToggleMode<CR>
nmap <leader>sc :SyntasticCheck<CR>
nmap <leader>sf :SyntasticCheck --fix<CR>

" enable eslint
let g:syntastic_javascript_checkers = ['eslint']


" force json files to use json linting instead of javascript
au BufRead,BufNewFile *.json set filetype=json

" run specs in tmux pane
let g:rspec_command = 'call Send_to_Tmux("bin/rspec {spec}\n")'
map <Leader>s :call RunNearestSpec()<CR>
nmap <Leader>rs <Plug>SetTmuxVars

"window
set number
set expandtab tabstop=2 shiftwidth=2 softtabstop=2
set gfn=monaco:h12

"swp and backup
set dir=~/.vimtmp
set backup
set backupdir=~/.vimbackup

"cursor
set cursorline
set cursorcolumn

"KEYMAPPING
nmap <Tab> <leader>

"navigation
nmap j gj
nmap k gk

"buffers
nmap <leader>bd :Kwbd<CR>
nmap <leader>vs :vsplit<CR>
nmap <leader>hs :split<CR>
nmap <C-L> <C-W>l
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k

"FZF
nnoremap <leader>d :Buffers<CR>
nmap <leader>f :Files<CR>

"registers
nmap <leader>" :reg<CR>

"search
set incsearch
set ignorecase
set smartcase
set hlsearch
nmap <leader>q :nohlsearch<CR>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

"nerdtree
nnoremap <leader>e :NERDTreeToggle<CR>

"Gundo
map <leader>gut :GundoToggle<CR>

"CloseTag.vim
let b:unaryTagsStack=""
if !exists("b:unaryTagsStack")
    let b:unaryTagsStack=""
endif

"Snippets
let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
let g:snipMate.snippet_version = 1
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,rails'

" Wikis
let g:vimwiki_list = [
  \ {'path': '~/Sync/wikis/personal', 'path_html': '~/Sync/wikis/personal/html'},
  \ {'path': '~/Sync/wikis/projects', 'path_html': '~/Sync/wikis/projects/html'}
  \ ]

let g:vimwiki_folding = 'list'
let g:vimwiki_fold_blank_lines = 0

" insert date
nmap <leader>id :put =strftime('%b %d, %Y')<CR>

"NERDREE
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDChristmasTree=1
let NERDTreeWinSize=40

"COLORS
set t_Co=256
set background=dark
colorscheme gruvbox

"RESIZING
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>-
endif

"PASTE
set pastetoggle=<leader>p

"Thyme
nmap <leader>0 :silent execute "!thyme -d"<cr>

"Rails
nnoremap <Leader>b :TagbarToggle<CR>
